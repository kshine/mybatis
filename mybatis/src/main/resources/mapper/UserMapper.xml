<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--对sql进行分类化的管理 sql隔离 在mapper代理方法开发中有重要作用-->
<!--id 标识映射文件中的sql 封装到mappedStatement对象中,称为statement的id-->
<!--#{id}：表示接受输入的参数,名称是id,如果输入参数是简单类型，参数名可以任意 value或者其它名称-->
<mapper namespace="com.freedom.mapper.UserMapper">
    <cache/>

    <select id="findUserList" parameterType="UserQueryVo" resultType="UserCustom">
        select * from user where sex = #{userCustom.sex} and username like '%${userCustom.userName}%'
    </select>

    <select id="findUserCount" parameterType="UserQueryVo" resultType="int">
        select count(1) from user
        <where>
            <if test="userCustom != null">
                <if test="userCustom.sex != null and userCustom.sex !='' ">
                    and sex = #{userCustom.sex}
                </if>
                <if test="userCustom.userName != null and userCustom.userName !='' ">
                    and username like '%${userCustom.userName}%'
                </if>
            </if>
        </where>

        <foreach collection="ids" item="item_id" open="and id in  (" close=")" separator=",">
            #{item_id}
        </foreach>

        <!--<foreach collection="ids" item="item_id" open="and (" close=")" separator="or">-->
            <!--id=#{item_id}-->
        <!--</foreach>-->

    </select>

    <resultMap id="userResultMap" type="user">
        <id column="id_" property="id"></id>
        <result column="username_" property="userName"></result>
    </resultMap>

    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM USER WHERE ID = #{id}
    </select>

    <select id="findUserById" parameterType="int" resultType="com.freedom.po.User" >
        SELECT * FROM USER WHERE ID = #{id}
    </select>

    <!--resultType 单条记录所映射的java类型
        模糊查询 ${} 表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
        如果传入简单类型 只能使用${value} 防止注入sql-->
    <select id="findUserByName" parameterType="String" resultType="com.freedom.po.User">
        SELECT * FROM  USER WHERE username LIKE '%${value}%';
    </select>

    <insert id="insertUser" parameterType="com.freedom.po.User">
       <selectKey keyProperty="id" resultType="int" order="AFTER">
           SELECT LAST_INSERT_ID()
       </selectKey>
        INSERT INTO USER (username,birthday,sex,address) VALUES (#{userName},#{birthday},#{sex},#{address})
    </insert>

    <delete id="deleteUserById" parameterType="int">
        DELETE FROM USER WHERE ID = #{id}
    </delete>

    <update id="updateUser" parameterType="com.freedom.po.User">
        <!-- userName #{}内名称与POJO属性要一致 where内属必须存在-->
        UPDATE USER SET username = #{userName},birthday= #{birthday},sex = #{sex},address =#{address} WHERE ID = #{id}
    </update>
    
    <!--传递hashMap-->
    <select id="findUserByHashMap" parameterType="hashMap" resultType="user"  >
        select * from user where id=#{id} and username like '%${username}%'
    </select>

</mapper>